@inherits LayoutComponentBase
@implements IDisposable
@inject ICartService cartService
@inject ILocalStorageService localStorageService
@inject NavigationManager navigationManager
<div class="page">
    <div class="sidebar" style="@IconMenuCssClass">
        <NavMenu ShowIconMenu="ToggleIconMenu" />
    </div>

    <main>
        <div class="top-row px-4">
            <TradeXEcommerce.Client.Pages.LoginDisplay></TradeXEcommerce.Client.Pages.LoginDisplay>
            @* <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a> *@
            <div class="p-3">
                <button type="button" class="btn btn-outline-danger position-relative" @onclick="NavigateToCart">
                    <i class="fa-solid fa-cart-shopping" style="color: #000000;"></i>
                    Cart
                    <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger mt-1">
                        @{
                            int ServiceCount = cartService.Count > 0 ? cartService.Count : ServiceCountProduct;
                        }
                        @ServiceCount
                        <span class="visually-hidden">unread message</span>
                    </span>
                </button>
            </div>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {

    private bool _iconMenuActive { get; set; }
    private string? IconMenuCssClass => _iconMenuActive ? "width: 80px;" : null;
    int ServiceCountProduct;

    protected void ToggleIconMenu(bool iconMenuActive)
    {
        _iconMenuActive = iconMenuActive;
    }

    protected override async Task OnInitializedAsync()
    {
        // cartService.OnChange += StateHasChanged;
        // ServiceCountProduct = (await localStorageService.GetItemAsync<List<MyCartModel>>("MyCart")).Count();

        cartService.OnChange += StateHasChanged;
        var myCartItems = await localStorageService.GetItemAsync<List<MyCartModel>>("MyCart");
        ServiceCountProduct = myCartItems?.Count ?? 0;
    }

    public void Dispose()
    {
        cartService.OnChange -= StateHasChanged;
    }

    private void NavigateToCart()
    {
        navigationManager.NavigateTo("/cart");
    }
}